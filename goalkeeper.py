import numpy as np
import cv2
import argparse
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

ap = argparse.ArgumentParser(description='–•–æ–∫–∫–µ–π–Ω—ã–π –≤—Ä–∞—Ç–∞—Ä—å. –û—Ç–±–∏–≤–∞–µ—Ç —à–∞–π–±—ã –ø–æ –ª—å–¥—É. –ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏. —á—Ç–æ —à–∞–π–±–∞ –¥–≤–∏–∂–µ—Ç—Å—è –ø–æ –ø—Ä—è–º–æ–π.')
ap.add_argument("-c", "--coordinat", type = int, required = False, help="–í—ã–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –æ—Å–∏.")
ap.add_argument("-p", "--predict", type = int, required = False, help="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ X.")
ap.add_argument("-r", "--range", type = int, required = False, help="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ RGB.")
ap.add_argument("-b", "--ball", type = int, required = False, help="–ü–æ–∏—Å–∫ –º—è—á–∞.")
args = vars(ap.parse_args())

# –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç—É
def range(camera):

    def nothing(x):
        pass

    cap = cv2.VideoCapture(camera)
    cv2.namedWindow('result')

    cv2.createTrackbar('minb', 'result', 0, 255, nothing)
    cv2.createTrackbar('ming', 'result', 0, 255, nothing)
    cv2.createTrackbar('minr', 'result', 0, 255, nothing)

    cv2.createTrackbar('maxb', 'result', 0, 255, nothing)
    cv2.createTrackbar('maxg', 'result', 0, 255, nothing)
    cv2.createTrackbar('maxr', 'result', 0, 255, nothing)

    while(cap.isOpened()):
        _, frame = cap.read()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        cv2.imshow('hsv', hsv)

        minb = cv2.getTrackbarPos('minb', 'result')
        ming = cv2.getTrackbarPos('ming', 'result')
        minr = cv2.getTrackbarPos('minr', 'result')

        maxb = cv2.getTrackbarPos('maxb', 'result')
        maxg = cv2.getTrackbarPos('maxg', 'result')
        maxr = cv2.getTrackbarPos('maxr', 'result')

        mask = cv2.inRange(hsv, (minb,ming,minr), (maxb,maxg, maxr))
        cv2.imshow('mask', mask)
        result = cv2.bitwise_and(frame, frame, mask = mask)
        cv2.imshow('result', result)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
def predict(X):
    # –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è –æ—Ç (0,0) –¥–æ (10,10)
    # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ x –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, —Ç.–µ. 1 –∫–æ–ª–æ–Ω–∫–∞ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤
    x = np.array([1, 2, 4, 5, 6, 8, 10]).reshape((-1, 1))
    y = np.array([1, 2, 4, 5, 6, 8, 10])

    print(x)
    print(y)

    # —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # .fit() - –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ ùëè‚ÇÄ –∏ ùëè‚ÇÅ
    model = LinearRegression().fit(x,y)

    # .score() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å x –∏ —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä y, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ ùëÖ¬≤.
    r_sq = model.score(x,y)
    print('coefficient of determination:', r_sq)

    # model —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç—ã .intercept_, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –∏ ùëè‚ÇÄ —Å .coef_, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç ùëè‚ÇÅ:
    # –ø–æ–ª—É—á–µ–Ω–∏–µ ùëè‚ÇÄ –∏ ùëè‚ÇÅ
    # .intercept_ ‚Äì —ç—Ç–æ —Å–∫–∞–ª—è—Ä, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ .coef_ ‚Äì –º–∞—Å—Å–∏–≤
    # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ùëè‚ÇÄ = -8.881784197001252e-16 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç -8.881784197001252e-16 –ø—Ä–∏ ùë•, —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é. –†–∞–≤–µ–Ω—Å—Ç–≤–æ ùëè‚ÇÅ = 1. –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –¥–æ 1 –ø—Ä–∏ ùë•, —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É.
    print('intercept (b0):', model.intercept_)
    print('slope (b1):', model.coef_)

    # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    # –æ—Ü–µ–Ω–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è —É—Ä–∞–≤–Ω–µ–Ω–∏–µ–º ùëì(ùë•) = ùëè‚ÇÄ + ùëè‚ÇÅùë•
    # y_pred = model.predict(x)
    # –∏–ª–∏
    # y_pred = model.intercept_ + model.coef_ * x

    # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è x = 23
    #x0 = np.array([23]).reshape((-1, 1))
    x0 = np.array([X]).reshape((-1, 1))
    y_pred = model.predict(x0)
    print('–ü—Ä–∏ X =', int(x0))
    print('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è Y =', int(y_pred))

# –ü–æ–∏—Å–∫ –º—è—á–∞
def ball():
    print('Test')




if __name__ == '__main__':

    if args["coordinat"] is not None:
        cap = cv2.VideoCapture(args["coordinat"])

        _, frame = cap.read()

        plt.imshow(frame)
        plt.show()

    if args["predict"] is not None:
        predict(args["predict"])

    if args["range"] is not None:
        range(args["range"])

    if args["ball"] is not None:
        cap = cv2.VideoCapture(args["ball"])

        while(cap.isOpened()):
            _, frame = cap.read()

            cv2.imshow('Original', frame)
            ball()

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cap.release()
        cv2.destroyAllWindows()
